{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red236\green186\blue254;\red255\green255\blue51;\red132\green221\blue253;
\red207\green187\blue254;\red243\green235\blue10;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c94438\c78969\c99727;\cssrgb\c99946\c98636\c25320;\cssrgb\c57861\c89157\c99446;
\cssrgb\c84913\c79069\c99741;\cssrgb\c96264\c92423\c0;\csgray\c0\c0;}
\margl1440\margr1440\vieww23860\viewh16380\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 												9.2 Parsing\

\fs28 \

\f1\b0 OCaml lexer: ocamllex ( transforms sequence of characters into \ul tokens\ulnone )\
OCaml parser: ocamlyacc ( analysis of an input and organize into \ul rule of grammar\ulnone )\
\
Menhir available through spam, 90% compatible with ocamllex and great support for debugging generated parsers (defined as a parser)\
\
Lexer: produce token\
Parser: declare token, produce AST nodes\
Evaluator: computes on AST nodes\
\

\f0\b \ul 9.2.1 Lexers\

\f1\b0 \ulnone Lexer generators are built on the theory of automata, it takes files/strings as input, and recognizes the sequence of characters it receives as a token in the language. Then produce output of that token, or rejects the sequence of characters as an invalid token.\
\

\f0\b \ul 9.2.2 Parsers\

\f1\b0 \ulnone Parser generators are built on the theory of automata, context-free grammar is a set of production rules that describes how one symbol can be replaced by other symbols. Example: the language of balanced parentheses, which includes strings such as 
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 3.26.23 PM.png \width2620 \height320 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28  are generated by these rules: 
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 3.26.51 PM.png \width1260 \height1040 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28 \
\

\f0\b \ul 9.2.3 Backus-Naur form(BNF)
\f1\b0 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 3.34.29 PM.png \width5860 \height4580 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs28 \cf0   
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 3.35.11 PM.png \width5680 \height3920 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28      
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 3.36.52 PM.png \width4460 \height2460 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 3.42.20 PM.png \width4640 \height460 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  syntax form rule of BNF\
 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 3.46.32 PM.png \width2060 \height660 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0   Explanation: the expression e is either an integer i , or two expressions with the symbol + appearing between them. 
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 3.50.53 PM.png \width2080 \height360 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28 (easier rewrite)\
\

\f0\b \ul 9.2.4 Example: SimPL\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \ulnone {{\NeXTGraphic Screenshot 2023-11-06 at 4.35.22 PM.png \width3180 \height2620 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \
\
\ul 9.2.4.1 The AST\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone AST: most important data structure in an interpreter\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 4.44.47 PM.png \width3620 \height2920 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  AST code in ast.ml file\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \
\ul 9.2.4.2 The Menhir Parser\ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 4.56.10 PM.png \width1580 \height300 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 : indicates that this file is intended as input to Menhir
\f0\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 There are four parts to grammar definition: \cb2 header\cb1 , \cb3 declarations\cb1 , \cb4 rules\cb1  and trailers.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \cb2 Header\cb1 : header appears between 
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 5.08.33 PM.png \width1200 \height360 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28 . Code will be directly copied into the generated parser.ml. 
\f0\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 5.08.59 PM.png \width1160 \height940 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0  
\f1\b0 Explanation: this opens the Ast module, so later, we can write expressions like Int i instead of Ast.Int i\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb3 Declarations\cb1 : saying what the lexical tokens of the language are
\f0\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 5.12.48 PM.png \width5680 \height4080 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 Explanation: token declarations for SimPL\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 5.15.48 PM.png \width6140 \height1520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  Declaration of precedence and associativity
\f0\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 5.19.31 PM.png \width2840 \height660 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0  
\f1\b0 Declaring the starting point for parsing the language. The declaration says to start with a rule named prog. It also says that parsing a prog will return an OCaml value of type Ast.expr. Then, end the declaration section with 
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 5.22.49 PM.png \width600 \height540 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f0\b\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 \cb4 Rules\cb1 : contains production rules that resembles BNF, the rules simply write \'93:\'94. \
Syntax of rule: 
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 5.25.05 PM.png \width7320 \height1620 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 			production: sequence of symbols that the rule matches. 			Action: the OCaml value returned if a match occurs\

\f0\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 Example: 
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 5.27.53 PM.png \width3580 \height940 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28  Explanation: this rules is named prog, prog is an expression followed by EOF. The first production(e=expr), says to match an expression and bind the resulting value to e. The action/AST node says to return that value e.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 Another example: 
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 5.30.35 PM.png \width8780 \height2980 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28 \
Explanation: 
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 5.31.00 PM.png \width10040 \height5340 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f0\b\fs28 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 Conclusion: 
\f1\b0 \ulnone in combination of the four parts, parser.mly file looks like this:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 5.37.07 PM.png \width9400 \height14160 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\ul 9.2.4.3 The Ocamllex Lexer\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \ulnone {{\NeXTGraphic Screenshot 2023-11-06 at 8.31.02 PM.png \width660 \height340 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 extension indicates that this file is intended as input to ocamllex, this file contains the lexer definition for the language wanted to lex. Menhir will process that file and produce a file named lexer.ml as output, it will contain the OCaml program that lexes the language\
\
Lexer has four parts:  \cb5 header\cb1 , \cb3 identifiers\cb1 , \cb4 rules\cb1  and trailers.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb5 Header\cb1 : header appears between 
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 8.34.11 PM.png \width840 \height320 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28 , it will be simply copied into the generated lexer.ml 
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 8.34.31 PM.png \width1400 \height800 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}(opens the Parser module, produced by Menhir from parser.mly)\
\
\cb6 Identifiers\cb1 : named regular expressions
\f0\b\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 8.37.35 PM.png \width7360 \height1320 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 \cb4 Rules:\cb7  written in notation that also resembles BNF\
Rules syntax: 
\fs24 \cb1 {{\NeXTGraphic Screenshot 2023-11-06 at 8.41.40 PM.png \width5920 \height1440 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28  
\fs24 {{\NeXTGraphic Screenshot 2023-11-06 at 8.44.18 PM.png \width8680 \height4800 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 Lexer.mll\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 \ulnone {{\NeXTGraphic Screenshot 2023-11-08 at 2.01.23 PM.png \width7660 \height9520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \ul \ulc0 9.2.4.4 Generating the Parser and Lexer\ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 8.50.41 PM.png \width5200 \height4760 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \
\
\ul 9.24.5 The Driver\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \ulnone {{\NeXTGraphic Screenshot 2023-11-06 at 8.57.41 PM.png \width9720 \height2340 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-11-06 at 8.59.51 PM.png \width10360 \height5180 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}}