{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red223\green33\blue121;\red255\green255\blue255;\red0\green0\blue0;
\red253\green128\blue8;\red251\green2\blue255;}
{\*\expandedcolortbl;;\cssrgb\c90980\c24314\c54902;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c100000\c57637\c0;\cssrgb\c100000\c25279\c100000;}
\margl1440\margr1440\vieww21140\viewh19680\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \ul \ulc0 5.2 Modules\
\

\f1\b0 \ulnone Structure: simply a collection of definitions, done by binding the structure to a name\
{{\NeXTGraphic Screenshot 2023-10-10 at 7.57.40 PM.png \width5440 \height1440 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}      \'93semi\'94- struct, a collection of definitions\
\
{{\NeXTGraphic Screenshot 2023-10-10 at 8.00.33 PM.png \width5580 \height3620 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}  Structure: how to use module, sig, end to structure a struct module. Output of OCaml has the form of module MyModule : sig \'85 end(indicates MyModule has been defined)\
\
Signature: a collection of specifications. Contains original definitions for variant types and exceptions. Type of a function\
\
Stacks: data structure stacks, like dishes, last one in, first one out\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 8.15.44 PM.png \width3220 \height4520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  {{\NeXTGraphic Screenshot 2023-10-10 at 8.16.51 PM.png \width3980 \height980 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}{{\NeXTGraphic Screenshot 2023-10-10 at 8.21.09 PM.png \width3720 \height1240 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}{{\NeXTGraphic Screenshot 2023-10-10 at 8.21.48 PM.png \width2460 \height720 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} s\'92 stands for s prime(apostrophe){{\NeXTGraphic Screenshot 2023-10-10 at 8.23.45 PM.png \width4480 \height2520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} Java vs OCaml stacks\
Example of pushing to stack:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 8.27.39 PM.png \width7000 \height1380 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  use modules to manipulate a stack\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 8.27.58 PM.png \width4620 \height1380 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  by writing ListStack.(e) ,  all the names from listStack becomes usable in e without needing to write the ListStack prefix each time\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 8.28.13 PM.png \width6400 \height2600 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 could use pipeline operator(reading left-to-right)\
\
List:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 8.17.13 PM.png \width2940 \height4060 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0  List data structure as Stacks\
\
Module Syntax:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 8.38.49 PM.png \width3620 \height940 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.2.2 Scope and Open\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 8.50.32 PM.png \width3700 \height2640 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 - After a module M has been defined, can access the names within it using the dot operator. However, the variable x isn\'92t available for access outside module.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 8.51.31 PM.png \width1680 \height1840 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  By using Open, can access all definitions of a module into the current scope\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 8.53.54 PM.png \width7720 \height1520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  open as a module item. Open is another sort of module_item/module definitions, its possible to open one module inside another\
\

\f0\b \ul 5.2.3. Module Type Definitions
\f1\b0 \ulnone \
\
 {{\NeXTGraphic Screenshot 2023-10-10 at 9.07.22 PM.png \width5540 \height5580 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}Writing module type definitions ourselves:( the arrow), it checks to see whether a module defines a certain item, but it can also hide items\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 9.08.56 PM.png \width6800 \height9520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0           {{\NeXTGraphic Screenshot 2023-10-10 at 9.10.18 PM.png \width5120 \height5440 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}             {{\NeXTGraphic Screenshot 2023-10-10 at 9.12.13 PM.png \width4300 \height980 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.2.4 Module Type Semantics
\f1\b0 \ulnone \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 9.23.30 PM.png \width2400 \height1160 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0   {{\NeXTGraphic Screenshot 2023-10-10 at 9.23.38 PM.png \width2680 \height1440 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} M with X\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 9.23.30 PM.png \width2400 \height1160 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0        {{\NeXTGraphic Screenshot 2023-10-10 at 9.24.28 PM.png \width2580 \height1440 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} M with Z\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-10 at 9.25.00 PM.png \width3040 \height1740 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  Both X and Z\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.3.1 Loading Compiled Modules\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone - After compiling an OCaml file, it produces a module having the same name as the file, but with the first letter capitalized. These compiled modules can be loaded into top-level using #load\
Example: \
\
\'93mods.ml\'94 file\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-12 at 9.11.35 PM.png \width3080 \height1880 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 - type in 
\f2\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
ocamlc\'a0mods.ml
\f1\fs24 \cf4  to compile it, it creates a new file named 
\f2\fs28 \cf2 mods.cmo
\f1\fs24 \cf4 . This is the Compiled Module Object file. AKA byte code\
- able to use in the top-level by stating #load \'93mods.cmo\'94;;\
- Compiler then takes the byte code found in mods.cmo and create a module named Mods to be available for use\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb1 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screenshot 2023-10-12 at 9.15.18 PM.png \width8780 \height2900 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  result. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-12 at 9.15.48 PM.png \width2360 \height2180 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-12 at 9.15.57 PM.png \width2620 \height1180 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  example of using the compiled module using syntax Mods.method/variable.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-12 at 9.16.24 PM.png \width2720 \height1320 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  Otherwise, use open to open the module, then directly use it\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.3.2 Dune\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone Dune: provides a command to make it easier to start utop with libraries already loaded. Suppose we add this dune file to the same directory as mods.ml: {{\NeXTGraphic Screenshot 2023-10-12 at 9.19.24 PM.png \width2260 \height740 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}. It\'92s tells dune to build a library named Mods out of the mods.ml file.\
- run {{\NeXTGraphic Screenshot 2023-10-12 at 9.20.18 PM.png \width1780 \height520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}to launch utop with that library already loaded. Then Mods.methods/values have access components without issuing a #load directive  {{\NeXTGraphic Screenshot 2023-10-12 at 9.20.50 PM.png \width3540 \height1540 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.3.3 Initializing the Toplevel
\f1\b0 \ulnone \
- In order to avoid having to type directives every time starting utop, initialize the top-level with some code before it launches by creating a .ocamlinit file\
- Example:\
	- create a file named .ocamlinit in the same directory as mods.ml, and within that file put this code: {{\NeXTGraphic Screenshot 2023-10-12 at 9.24.13 PM.png \width1860 \height520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
	- then restart utop with dune utop. All the names defined in Mods will already be in scope  {{\NeXTGraphic Screenshot 2023-10-12 at 9.25.43 PM.png \width2580 \height2100 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\

\f0\b \ul 5.3.4 Requiring Libraries\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone Suppose wanting to experiment with some Unit code in utop, do {{\NeXTGraphic Screenshot 2023-10-12 at 9.28.36 PM.png \width2440 \height460 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} then {{\NeXTGraphic Screenshot 2023-10-12 at 9.28.44 PM.png \width1900 \height420 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.3.5 Load vs Use\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone #Load: a compiled module file, it loads the byte code and makes it available for use. Example: loading mods.cml caused the Mod module to be available, then can access its members with expressions like Mod.b\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-12 at 9.33.36 PM.png \width3080 \height2320 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
#Use: a typed file content directly into the top-level, using mods.ml doesn\'92t cause a Mod module to be available, but the definitions can be accessed directly\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-12 at 9.33.30 PM.png \width3480 \height1980 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 5.4 Encapsulation\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.4.1 Opacity\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone Encapsulation: the hiding of information about implementation behind an interface\
Opacity: the opacity that module type annotations create, use opacity as the declaration of abstract types\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 11.48.07 AM.png \width6920 \height5060 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 11.50.48 AM.png \width4800 \height1920 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  Example of hiding methods. In the MATH module type, only the fact method is mentioned. In the module Math: MATH, because it\'92s being \'93concealed\'94 by MATH module type, it makes the Math.fact_aux hidden. In other words, by \'93concealing\'94 a module with a module type, only the methods in the module type shows up in the module. 
\f0\b Syntax
\f1\b0  module moduleName : moduleType \'93conceals\'94 or \'93hides\'94 methods that isn\'92t in moduleType..\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 11.56.35 AM.png \width9760 \height5520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  example: if wanting to check the definitions, but not hide anything, by supplying the annotations at the time of the module definition. Syntax: module newName : moduleType = moduleName\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 11.59.35 AM.png \width5540 \height3840 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0   this syntax allows methods to be discovered, and not hidden. Since the checker module name isn\'92t intended to be used much, could leave it anonymous: {{\NeXTGraphic Screenshot 2023-10-13 at 11.59.40 AM.png \width3680 \height720 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 12.03.08 PM.png \width2500 \height1380 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 12.03.14 PM.png \width6500 \height5460 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  private and public visibility modifiers are somewhat similar to Java. See this comparison.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.4.2 Abstract Types\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone {{\NeXTGraphic Screenshot 2023-10-13 at 12.14.37 PM.png \width8260 \height13760 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0  
\f1\b0 conclusion of \'93concealing\'94 the module \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 12.30.41 PM.png \width7200 \height6900 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0      example of abstract types declaring t as an int , and exposing the equality of types t and int in the module type\
\
\
 {{\NeXTGraphic Screenshot 2023-10-13 at 12.30.47 PM.png \width6340 \height5660 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}         example of abstract types but keeping t abstract. Conclusion: if the module type doesn\'92t state/declare it, the modules being \'93concealed\'94 by it also doesn\'92t state/declare it. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.4.3 Pretty Printing\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone Format module provides this functionality, and Format.formatter is an abstract type in it.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 12.40.46 PM.png \width8800 \height1880 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0       {{\NeXTGraphic Screenshot 2023-10-13 at 12.40.55 PM.png \width4300 \height2880 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} example of printer formats. This will add the string \'93kupo\'94 at the end of each string. To remove: {{\NeXTGraphic Screenshot 2023-10-13 at 12.41.48 PM.png \width4360 \height740 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.5 Compilation Units\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone \
Compilation Unit: a pair of OCaml source files in the same directory sharing the same base name, but with different extensions. One file is x.ml, the other is x.mli. The file x\cb5 .ml\cb1  is the implementation(\cb5 Module\cb1 ), and the x\cb6 .mli \cb1 is the interface(\cb6 Module type/signature\cb1 )\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb6 foo.mli file\cb1 					\cb5 foo.ml file\cb1 				compiling foo.ml have the same effect as defining the module Foo\
 {{\NeXTGraphic Screenshot 2023-10-13 at 1.06.29 PM.png \width2840 \height780 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}           {{\NeXTGraphic Screenshot 2023-10-13 at 1.04.13 PM.png \width3160 \height1380 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}		{{\NeXTGraphic Screenshot 2023-10-13 at 1.04.58 PM.png \width3220 \height2520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 1.05.38 PM.png \width7700 \height1620 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  General syntax of the Compilation Units\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 1.20.05 PM.png \width5460 \height7500 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  example of code division between the \cb5 .ml\cb1  and \cb6 .mli\cb1  files.\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.6 Functional Data Structures
\f1\b0 \ulnone \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 1.47.47 PM.png \width9140 \height8000 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0         {{\NeXTGraphic Screenshot 2023-10-13 at 1.47.57 PM.png \width5980 \height6540 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.6.2 Stacks\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 2.02.07 PM.png \width7680 \height13500 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Stacks example\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.6.4 Queues\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 2.13.24 PM.png \width10480 \height13520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0     {{\NeXTGraphic Screenshot 2023-10-13 at 2.13.33 PM.png \width10780 \height4780 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}   Implementing a Queue example\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.6.5 Maps\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone Module type of Map\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 2.23.01 PM.png \width10860 \height5980 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 .     {{\NeXTGraphic Screenshot 2023-10-13 at 2.23.13 PM.png \width9580 \height3240 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}  Module of Map\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 2.24.02 PM.png \width10680 \height5140 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  Implementing a map example\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.6.6 Sets\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 2.33.04 PM.png \width10500 \height5200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  Module type of Set\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 2.33.44 PM.png \width6200 \height2060 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  No duplicated elements \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 2.34.35 PM.png \width6920 \height2020 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  Allows duplicated elements\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.7 Module Type Constraints
\f1\b0 \ulnone \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 2.53.33 PM.png \width6260 \height2620 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  {{\NeXTGraphic Screenshot 2023-10-13 at 2.53.43 PM.png \width4380 \height2540 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} {{\NeXTGraphic Screenshot 2023-10-13 at 2.53.59 PM.png \width4560 \height1400 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}  {{\NeXTGraphic Screenshot 2023-10-13 at 2.54.08 PM.png \width6800 \height1860 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.7.1 Specializing Module Types\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ulnone Syntax: 
\f1\b0 {{\NeXTGraphic Screenshot 2023-10-13 at 3.10.22 PM.png \width9940 \height520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f0\b \ul \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone {{\NeXTGraphic Screenshot 2023-10-13 at 2.57.13 PM.png \width5120 \height3640 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0  
\f1\b0  previously leaving off module type annotations\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 2.58.16 PM.png \width7400 \height4400 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  example of adding a constraint using the {{\NeXTGraphic Screenshot 2023-10-13 at 3.11.30 PM.png \width760 \height340 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}keyword. This specializes the Ring module type to specify that t and int are the same type. Example: {{\NeXTGraphic Screenshot 2023-10-13 at 3.01.19 PM.png \width5560 \height3060 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 3.02.14 PM.png \width7800 \height3580 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  another example with float type. Example: {{\NeXTGraphic Screenshot 2023-10-13 at 3.02.46 PM.png \width8380 \height2980 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.7.2 Constraints\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ulnone Syntax: 
\f1\b0 {{\NeXTGraphic Screenshot 2023-10-13 at 3.10.58 PM.png \width7280 \height420 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 3.15.48 PM.png \width11540 \height13240 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  Example: for the module type U, the types of x and y became int and float because of the module A = B constraint. The constraint doesn\'92t specify that two modules are the same, rather, specifies that their types are constrained to be equal.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.8 Includes\
\
5.8.1 Semantics of Includes\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone Includes: a principled copy-and-paste that is quick and easy to use, while avoiding duplication. Similar to inheritances in object-oriented languages\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 3.49.40 PM.png \width6880 \height4240 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0    {{\NeXTGraphic Screenshot 2023-10-13 at 3.49.49 PM.png \width6740 \height1260 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}  example of using Include, it allows a module to include all items defined by another module. Or a module type to include all the specifications of another module type\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.8.3 Include vs Open
\f1\b0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 4.02.18 PM.png \width1780 \height3360 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0    {{\NeXTGraphic Screenshot 2023-10-13 at 4.02.06 PM.png \width8320 \height1240 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} {{\NeXTGraphic Screenshot 2023-10-13 at 4.02.50 PM.png \width6780 \height3860 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} difference between using Include vs Open\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.8.4 Including Code in Multiple Modules\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-13 at 4.06.01 PM.png \width6760 \height3120 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  Example of having multiple include in a module 
\f0\b \ul \

\f1\b0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.9 Functors\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone Functor: a \'93function\'94 from module to modules\
{{\NeXTGraphic Screenshot 2023-10-17 at 7.17.19 PM.png \width3260 \height2800 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}{{\NeXTGraphic Screenshot 2023-10-17 at 7.20.44 PM.png \width4500 \height4520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  IncX takes in a module input, then increments the x value, then outputs it as another module. In this example, IncX function\'92s input is named M, and its type input is X.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 7.24.23 PM.png \width3320 \height3560 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} a different way to do the above and have the same results, just different syntax.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 7.38.15 PM.png \width8640 \height6980 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  applying functor to a module. Functor can return any module it likes, even ones that are different than its input structure\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \ul 5.9.1 Functor Syntax and Semantics\

\f1\b0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 7.42.33 PM.png \width3160 \height740 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  general syntax for functors, S is the type annotation, and the M is a \'93representation\'94 of the Module input. ( M : S ) is required as OCaml needs S to be provided\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 7.50.01 PM.png \width4580 \height920 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  another way to write functors, these examples are anonymously functors. The second method uses the functor keyword.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 7.51.25 PM.png \width5300 \height520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  functor parameterization on multiple structures same as {{\NeXTGraphic Screenshot 2023-10-17 at 7.52.13 PM.png \width8700 \height520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 7.53.13 PM.png \width4060 \height320 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  specifies the output type of a functor\
\
\

\f0\b \ul 5.9.2 Functor Type syntax and semantics\

\f1\b0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 7.55.28 PM.png \width3700 \height480 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  syntax for functor types\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 7.57.28 PM.png \width6400 \height700 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  X -> Add is a functor type, and it works for the AddX module defined earlier\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 8.00.59 PM.png \width4060 \height2300 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0   input module M has to type match with T, then assigns value pair p = (M.x, 1)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 8.04.12 PM.png \width8480 \height1600 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  same as above, with output module type is depended on input module type\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 8.06.31 PM.png \width7680 \height600 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  both of these struct will be passed in as input M module, Pair1 module above then takes the M.x value and pair agains int 1.\
											Predicted result would be:  P0 = (0,1)      PA = (a, 1)\
\

\f0\b \ul 5.9.3 The Map module\

\f1\b0 \ulnone Standard library\'92s map module implementation a map using balanced binary trees. The Map module defines a functor Make that creates a structure implementing a map over particular type of keys\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 8.25.49 PM.png \width4060 \height1200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  compare function specifies the comparison between the keys. If key1=key2 return 0. If key1<key2 return -x. If key1>key2 return x\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 8.27.41 PM.png \width5180 \height2780 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  the output of Map.Make supports all usual operations expected from a dictionary\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 8.29.33 PM.png \width4120 \height3680 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  {{\NeXTGraphic Screenshot 2023-10-17 at 8.30.44 PM.png \width1880 \height1080 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}example of Map module. Map m maps the day Mon to string \'93Monday\'94 and Tue to string \'93Tuesday\'94\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 8.35.44 PM.png \width4480 \height5860 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}{{\NeXTGraphic Screenshot 2023-10-17 at 8.36.05 PM.png \width11740 \height3440 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  example of using Map library\'92s mem, find, and bindings function\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 8.32.03 PM.png \width9880 \height12680 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  all available operations in the Map library \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 8.53.23 PM.png \width10040 \height4940 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  Make compare keys and decide whether to recurse on the left or right subtree, Map uses a functor to solve the problem \
\

\f0\b \ul 5.9.3.2 Maps with Custom Key Types\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone {{\NeXTGraphic Screenshot 2023-10-17 at 8.57.27 PM.png \width10700 \height2820 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 8.57.41 PM.png \width4440 \height300 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  Example: map in which keys are records representing names, sort by last name, then first name\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 9.14.16 PM.png \width8480 \height2340 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0    {{\NeXTGraphic Screenshot 2023-10-17 at 9.14.25 PM.png \width7180 \height1140 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} example of using Kardashians,\
\

\f0\b \ul 5.9.3.3 How Map uses module type constraints\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone {{\NeXTGraphic Screenshot 2023-10-17 at 9.22.47 PM.png \width7940 \height460 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  specification for Map.Make syntax. With is a constraint. Exposes S.key = Ord.t\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 9.28.21 PM.png \width3780 \height3380 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  effect of sharing constraint used the = Int.t to be present. So IntMap.key = Int.t = int\
\

\f0\b \ul 5.9.4. Using Functors\

\f1\b0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 9.40.22 PM.png \width7940 \height12020 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  implementation and example of a stack\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 9.46.14 PM.png \width7640 \height4100 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  use functors that is parameterized on the stack implementation, and producing the test for that implementation\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 9.47.16 PM.png \width9380 \height3100 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  eliminate duplication through the use of first-class modules\
\

\f0\b \ul 5.9.4.2 Extending Multiple Modules\

\f1\b0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 9.49.40 PM.png \width7340 \height3360 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0   accomplish parameterization with a functor\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 9.53.03 PM.png \width7120 \height6020 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 9.53.10 PM.png \width7440 \height4800 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-10-17 at 9.53.16 PM.png \width7260 \height7040 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
}