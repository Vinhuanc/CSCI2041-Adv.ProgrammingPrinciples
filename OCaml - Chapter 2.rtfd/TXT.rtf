{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue10;\red252\green112\blue56;}
{\*\expandedcolortbl;;\cssrgb\c99942\c98555\c0;\cssrgb\c100000\c52407\c27938;}
\margl1440\margr1440\vieww26080\viewh19680\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 										
\fs48 Chapter 2: The Basics of OCaml\

\f1\b0\fs28 \
- Five essential components to learning a language:\
	1. Syntax: defined rules that constitute whether a program in the language is well-formed, including the keyword, restrictions, formatting, punctuation, and operators.\
	2. Semantics: the rules that define the behavior of programs, or the meaning of a program.\
	3. Idioms: common approaches to using the language features.\
	4. Libraries: bundles of code that have been pre-written to offer more productivity to other programmers.\
	5. Tools: language implementations provide compiler/interpreter as a tool for interacting with the computer using the language \
\

\f0\b\fs36 \ul 2.1 The OCaml Toplevel\

\f1\b0\fs28 \ulnone Start utop from terminal:  utop\
\cf2 \cb3 ;;\cf0  \cb1 - double semi-clone, tells utop user done entering expression, OCaml should process the code 
\fs24 {{\NeXTGraphic Screenshot 2023-09-05 at 4.33.16 PM.png \width2860 \height500 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28 \
\
 
\fs24 {{\NeXTGraphic Screenshot 2023-09-05 at 4.33.40 PM.png \width2900 \height820 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28  read response from right to left(OCaml evaluates the expression, informs the resulting value, and the value\'92s type)\
	- 3110 is the value\
	- int is the type of the value\
	- value wasn\'92t given a name, hence the -(dash symbol)\
\
 
\fs24 {{\NeXTGraphic Screenshot 2023-09-05 at 4.36.34 PM.png \width3700 \height1460 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28      booleans\
\

\fs24 {{\NeXTGraphic Screenshot 2023-09-05 at 4.36.55 PM.png \width3020 \height680 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28         integer expression\
\

\fs24 {{\NeXTGraphic Screenshot 2023-09-05 at 4.37.23 PM.png \width3800 \height720 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28           string\
\

\fs24 {{\NeXTGraphic Screenshot 2023-09-05 at 4.41.03 PM.png \width5120 \height620 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28     concatenate string\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-05 at 4.49.55 PM.png \width3340 \height680 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0     float number multiplication ( *.)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-05 at 4.57.07 PM.png \width3160 \height700 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0   replace 3110 with value & int with datatype\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-05 at 5.09.08 PM.png \width3120 \height1760 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0   - value of 342, whose type was int, and is bound to the name a(from right to left)\
				     - value name x, which has type int, and is equal to 342(from left to right)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-05 at 5.12.33 PM.png \width2320 \height620 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 add values from name variables(name bounds)\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-05 at 5.24.34 PM.png \width6020 \height4000 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  OCaml functions\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.02.52 AM.png \width7940 \height940 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  convert between int & float. Built-in functions: int_of_float and float_of_int\
\
\

\f0\b Datatype conversion ( from x to String)
\f1\b0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.08.43 AM.png \width5780 \height840 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 string_of_int method to convert to Strings (from int to string)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.10.13 AM.png \width6860 \height1060 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 string_of_float method to convert to string (from float to string)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.11.34 AM.png \width6520 \height960 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  string_of_bool method to convert to string (from boolean to string)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.12.25 AM.png \width5980 \height940 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  String.make to convert to string (from char to string)\
\
\
\

\f0\b Datatype conversion ( from String to x)
\f1\b0 \

\f0\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.15.23 AM.png \width6980 \height920 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0  
\f1\b0 int_of_string to convert to int datatype ( from string to int)\

\f0\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.16.25 AM.png \width8080 \height960 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0  
\f1\b0 float_of_string to convert to float datatype ( from string to float)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.17.47 AM.png \width6660 \height980 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  bool_of_string from to convert to boolean datatype ( from string to boolean)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.19.29 AM.png \width5620 \height880 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  individuals of a string can be accessed by a 0-based index. Syntax: \'93String\'94.[#];;\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.51.48 AM.png \width9960 \height1040 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  if expressions\
\

\f0\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 8.49.46 AM.png \width5960 \height920 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0  
\f1\b0 another way of let expressions\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 9.02.15 AM.png \width6440 \height3560 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  string concatenation by let expressions\

\f0\b \

\f1\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 5.43.29 PM.png \width6160 \height940 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  dynamic semantics\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 5.50.53 PM.png \width6760 \height1480 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  named function(increaseByTwo), num(user passed-in parameter)\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 6.59.58 PM.png \width8060 \height2060 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  another way of direct functions ( more simple solution)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.02.53 PM.png \width8320 \height2140 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  direct functions with 2 parameters\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.47.02 PM.png \width5120 \height1420 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 anonymous functions: inside the parenthesis is the function to be applied, #2 is the argument to be applied to\
\
\

\f0\b\fs36 \ul 2.4.5 Polymorphic Functions
\f1\b0\fs28 \
\ulnone Identity function: the function that simply returns its input\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-11 at 5.33.15 AM.png \width4640 \height4220 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  returns the datatype and value to what the user pass in. Type of x would be \'91a\'92, pronounced \'91alpha\'92, similar to Java\'92s <T> type variable. Stands for unknown variable similar to know variable. Close to Java\'92s generics, polymorphism. Behave in many ways.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-11 at 5.41.36 AM.png \width14000 \height3540 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  restricts type to a polymorphic function. Example: restricting the data type of x to be an integer, disallowing other datatypes to be passed in.\
\

\f0\b\fs36 \ul 2.4.6 Labeled and Optional Arguments
\f1\b0 \ulnone :
\fs28  label arguments to its functions\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-11 at 5.53.25 AM.png \width11320 \height2040 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  labeling arguments to its functions,\

\f0\b \ul \

\f1\b0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-11 at 5.56.48 AM.png \width10440 \height1980 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  shorthand for the above equivalent syntax\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-11 at 6.00.31 AM.png \width10520 \height840 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  syntax to write both labeled argument and explicit type annotation\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-11 at 6.01.43 AM.png \width5260 \height780 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-11 at 6.05.04 AM.png \width8780 \height3120 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  optional arguments, a default value must be provided. If user passes in a parameter for the optional value, that value will be used. Otherwise, the default value will be used.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs36 \ul 2.4.7 Partial Application
\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \ulnone {{\NeXTGraphic Screenshot 2023-09-11 at 6.27.08 AM.png \width6520 \height3200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs36 \ul 2.4.8 Function Associativity
\f1\b0\fs28 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-11 at 6.41.02 AM.png \width5040 \height4260 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-09-11 at 6.41.17 AM.png \width3700 \height2800 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs36 \ul 2.4.9 Operators as Functions
\fs28 \

\f1\b0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-11 at 6.50.24 AM.png \width3700 \height4220 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  using operators as functions example \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-11 at 6.51.57 AM.png \width6500 \height2060 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 max function, compares two numbers and return the maximum number using operators as functions\
\

\f0\b\fs36 \ul 2.4.10 Tail Recursion
\f1\b0 \ulnone \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\

\f0\b \ul 2.6 Printing
\fs28 \
\
2.6.1 Unit\

\f1\b0 \ulnone Unit: when programmer needs to take an argument or return a value, but there\'92s no interesting value to pass or return. Similar to Java\'92s void. A datatype with only one unit, its value is ()\
\

\f0\b \ul 2.6.2 Semicolon
\f1\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 \ulnone {{\NeXTGraphic Screenshot 2023-09-11 at 2.59.06 PM.png \width7120 \height2600 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 Nested let expressions, print one thing after another.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\

\f0\b \ul 2.6.4 Printf
\f1\b0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-11 at 3.10.43 PM.png \width12740 \height2220 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0   use OCaml\'92s Printf module to print statements using format specifier\
\
\
\

\f0\b \ul 2.7 Debugging\

\f1\b0 \ulnone Rob Miller:\
	1. The first defense against bugs is to make them impossible.\
	2. The second defense against bugs is to use tools to find them.\
	3. The third defense against bugs is to make them immediately visible.\
	4. The fourth defense agains bugs is extensive testing.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b \ul 2.7.3 Debugging in OCaml\

\f1\b0 \ulnone - print statements: print statements to ascertain the value of a variable\
- function traces: use the #trace directive to see the trace of recursive calls and returns for a function\
- debugger: debugging tool ocamldebug\
\
\
\
\
\
\
Additional Notes:\
- double semicolon is needed for interactive sessions(terminal) at top-level, no need double semicolon to write in .ml file \
- two operator for Caml arithmetic operators : int & double\
- two equality operators in OCaml, = and ==. 	Inequality operators <> and !=.    = and <> examine structural equality, whereas == and != examine physical equality\
- everything is strictly a function, not a method\
- control + l to \'93clear\'94 terminal screen\
- state recursive function definition: let rec f\'85\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.04.06 PM.png \width6100 \height1180 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  function syntactically different but semantically equivalent \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 7.30.34 PM.png \width9740 \height3040 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2023-09-06 at 8.02.52 PM.png \width10180 \height3640 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 \
\

\f0\b Datatypes:\

\f1\b0 - bool: Booleans: written as true and false. Short-circuit conjunction && and disjunction || operators are available\
- char: Characters: written with single quotes, such as \'91a\'92, \'91b\'92, \'91c\'92. Can convert characters to and from integers with char_of_int and int_of_char.\
- string: Strings: sequence of characters, written with double quotes, such as \'93abcd\'94. Stain concatenation operator is ^\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}